import itertools

map = ((0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0 ),
    (0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8 ),
    (0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3 ),
    (0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb ),
    (0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa ),    
    (0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5 ),
    (0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf ),  
    (0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd ),  
    (0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc ),    
    (0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4 ),   
    (0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe ),   
    (0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7 ),   
    (0x2, 0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6 ),    
    (0x3, 0x1, 0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2 ),   
    (0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1, 0x0, 0x8, 0x9 ),   
    (0x0, 0x8, 0x9, 0xb, 0xa, 0xe, 0xf, 0xd, 0xc, 0x4, 0x5, 0x7, 0x6, 0x2, 0x3, 0x1 ))

#def encryptChar(char, key):
#    cl = char ^ 0x0F
#    ch = char >> 4
#    kl = key ^ 0x0F
#    kh = key >> 4

def decryptChar(encrypted, key):
    el = encrypted & 0x0F
    eh = encrypted >> 4
    kl = key & 0x0F
    kh = key >> 4
    ph = findPlainChar(eh, kl)
    pl = findPlainChar(el, kh)
    return (ph << 4) + pl

def findPlainChar(e, k):
    for i in range(len(map)):
        row = map[i]
        if row[k] == e:
            return i

def decrypt(encryptedText, key):
    for i in range(len(encryptedText)):
        c = encryptedText[i]
    
        k = ord(key[i % len(key)])
        p = decryptChar(c, k)
        print(chr(p), end='')

def decryptTest(encryptedText, key):
    dText = ""
    for i in range(len(encryptedText)):
        c = encryptedText[i]
    
        k = ord(key[i % len(key)])
        p = decryptChar(c, k)
        if not isInPlainRange(p):
            return -1
        dText += chr(p)

    return dText

def isInPlainRange(p):
    return True
    if(p < 0x20 or p > 0x7E):
        return False
    return True

def testKey(encryptedText, maxKeyLength):
    keyChars = ['L']#[0x5F,0x4C,0x4C,0x4C,0x4C,0x4C,0x4C,0x5F]
    # for i in range(0x5F, 0x60):
    #     keyChars.append(chr(i))

    for i in range(1, maxKeyLength + 1):
        print(i)
        for combination in itertools.product(keyChars, repeat=i):
            key = "".join(combination)
            print(key)
            dText = decryptTest(encryptedText, key)
            if(dText != -1):
                print(key)
                print(dText)
                return dText

def frequency(text):
    freq = dict()
    for c in text:
        cHex = hex(c)
        if cHex not in freq:
            freq[cHex] = 1
        else:
            freq[cHex] += 1
    sortedFreq = sorted(freq.items(), key=lambda kv: kv[1], reverse=True)
    return sortedFreq

def decrypt_with_key(ciphertext,key):
    key_list = list(key)
    result = ""
    for i in range(len(ciphertext)):
        result += chr(decryptChar(ciphertext[i],ord(key_list[i%8])))
    return result

file = open("ciphertext1", "rb")
encryptedText = file.read()
maxKeyLength = 8
#dText = testKey(encryptedText, maxKeyLength)

# dText = decrypt_with_key(encryptedText,"_LitFuT_")
# testFile = open("test.txt", "wb")
# testFile.write(dText.encode('charmap'))

print(frequency(encryptedText))
# print(hex(decryptChar(0xda,ord("_"))))
